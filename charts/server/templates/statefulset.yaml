apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "server.fullname" . }}
  labels:
    {{- include "server.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "server.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "server.fullname" . }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "server.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "server.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      {{- if or .Values.postgresql.enabled .Values.externalPostgresql.enabled }}
        - name: download-jdbc
          securityContext:
            {{- toYaml (merge (dict "runAsUser" 1000) .Values.downloadJDBC.securityContext) | nindent 12 }}
          image: {{ printf "%s:%s" .Values.downloadJDBC.image.repository (default "latest" .Values.downloadJDBC.image.tag) }}
          imagePullPolicy: {{ .Values.downloadJDBC.image.pullPolicy | default "IfNotPresent" }}
          resources:
            limits:
              cpu: 50m
              memory: 32Mi
            requests:
              cpu: 50m
              memory: 32Mi
          volumeMounts:
            - name: data
              mountPath: /data
          command:
            - /bin/sh
            - -cx
            - |
              {{- if .Values.downloadJDBC.maven.enabled }}
              mvn dependency:get -Dartifact={{ include "server.jdbc.artifact" . }} -Dtransitive={{ .Values.downloadJDBC.maven.transitive }}
              mvn dependency:copy -Dartifact={{ include "server.jdbc.artifact" . }} -DoutputDirectory=/data/lib/jdbc/
              {{- else }}
              (mkdir -p /tmp/jdbc/ && wget -P /tmp/jdbc/ {{ include "server.jdbc.artifactUrl" . }}) && (mkdir -p /data/lib/jdbc/ && cp -rf /tmp/jdbc/* /data/lib/jdbc/)
              {{- end }}
      {{- end }}
      {{- if .Values.volumePermissions.enabled }}
        - name: fix-permissions
          securityContext:
            {{- toYaml .Values.volumePermissions.securityContext | nindent 12 }}
          image: {{ printf "%s:%s" .Values.volumePermissions.image.repository (default "latest" .Values.volumePermissions.image.tag) }}
          imagePullPolicy: {{ .Values.volumePermissions.image.pullPolicy | default "IfNotPresent" }}
          resources:
            {{- toYaml .Values.volumePermissions.resources | nindent 12 }}
          command:
            - /bin/sh
            - -cx
            - |
              chown -Rvh {{ default 1000 .Values.securityContext.runAsUser }}:{{ default 1000 .Values.securityContext.runAsGroup }} /data
          volumeMounts:
            - name: data
              mountPath: /data
            - name: artifacts
              mountPath: /data/system/artifacts
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: logs
              mountPath: /opt/teamcity/logs
            - name: temp
              mountPath: /opt/teamcity/temp
            - name: data
              mountPath: /data/teamcity_server/datadir
            - name: artifacts
              mountPath: /data/teamcity_server/datadir/system/artifacts
            {{- range $name, $_ := (include "server.config" . | fromYaml) }}
            - name: config
              mountPath: {{ printf "/data/teamcity_server/datadir/config/%s" $name }}
              subPath: {{ $name }}
            {{- end }}
          ports:
            - name: http
              containerPort: 8111
              protocol: TCP
{{/*          livenessProbe:*/}}
{{/*            httpGet:*/}}
{{/*              path: /*/}}
{{/*              port: http*/}}
{{/*          readinessProbe:*/}}
{{/*            httpGet:*/}}
{{/*              path: /*/}}
{{/*              port: http*/}}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            {{- with .Values.additionalEnv }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "server.fullname" . }}-config
        - name: temp
          emptyDir: {}
      {{- if and .Values.persistence.data.enabled .Values.persistence.data.existingClaim }}
        - name: data
          persistentVolumeClaim:
          {{- with .Values.persistence.data.existingClaim }}
            claimName: {{ tpl . $ }}
          {{- end }}
      {{- else if not .Values.persistence.data.enabled }}
        - name: data
          emptyDir: {}
      {{- end }}
      {{- if and .Values.persistence.artifacts.enabled .Values.persistence.artifacts.existingClaim }}
        - name: artifacts
          persistentVolumeClaim:
          {{- with .Values.persistence.artifacts.existingClaim }}
            claimName: {{ tpl . $ }}
          {{- end }}
      {{- else if not .Values.persistence.artifacts.enabled }}
        - name: artifacts
          emptyDir: {}
      {{- end}}
      {{- if and .Values.persistence.logs.enabled .Values.persistence.logs.existingClaim }}
        - name: logs
          persistentVolumeClaim:
          {{- with .Values.persistence.logs.existingClaim }}
            claimName: {{ tpl . $ }}
          {{- end }}
      {{- else if not .Values.persistence.logs.enabled }}
        - name: logs
          emptyDir: {}
      {{- end }}
  volumeClaimTemplates:
  {{- if and .Values.persistence.data.enabled (not .Values.persistence.data.existingClaim) }}
    - metadata:
        name: data
      {{- with .Values.persistence.data.annotations }}
        annotations:
        {{- range $key, $value := . }}
          {{ $key }}: {{ $value }}
        {{- end }}
      {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.data.accessModes }}
          - {{ . | quote }}
        {{- end }}
        {{- if .Values.persistence.data.snapshotName }}
        dataSource:
          name: {{ .Values.persistence.data.snapshotName }}
          kind: VolumeSnapshot
          apiGroup: snapshot.storage.k8s.io
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.data.size | quote }}
        {{ include "server.storage.class" (dict "persistence" .Values.persistence.data "global" .Values.global) }}
        {{- if .Values.persistence.data.selector }}
        selector: {{- include "server.tplvalues.render" (dict "value" .Values.persistence.data.selector "context" $) | nindent 10 }}
        {{- end -}}
  {{- end }}
  {{- if and .Values.persistence.artifacts.enabled (not .Values.persistence.artifacts.existingClaim) }}
    - metadata:
        name: artifacts
      {{- with .Values.persistence.artifacts.annotations }}
        annotations:
        {{- range $key, $value := . }}
          {{ $key }}: {{ $value }}
        {{- end }}
      {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.artifacts.accessModes }}
          - {{ . | quote }}
        {{- end }}
        {{- if .Values.persistence.artifacts.snapshotName }}
        dataSource:
          name: {{ .Values.persistence.artifacts.snapshotName }}
          kind: VolumeSnapshot
          apiGroup: snapshot.storage.k8s.io
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.artifacts.size | quote }}
        {{ include "server.storage.class" (dict "persistence" .Values.persistence.artifacts "global" .Values.global) }}
        {{- if .Values.persistence.artifacts.selector }}
        selector: {{- include "server.tplvalues.render" (dict "value" .Values.persistence.artifacts.selector "context" $) | nindent 10 }}
        {{- end -}}
  {{- end }}
  {{- if and .Values.persistence.logs.enabled (not .Values.persistence.logs.existingClaim) }}
    - metadata:
        name: logs
      {{- with .Values.persistence.logs.annotations }}
        annotations:
        {{- range $key, $value := . }}
          {{ $key }}: {{ $value }}
        {{- end }}
      {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.logs.accessModes }}
          - {{ . | quote }}
        {{- end }}
        {{- if .Values.persistence.logs.snapshotName }}
        dataSource:
          name: {{ .Values.persistence.logs.snapshotName }}
          kind: VolumeSnapshot
          apiGroup: snapshot.storage.k8s.io
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.logs.size | quote }}
        {{ include "server.storage.class" (dict "persistence" .Values.persistence.logs "global" .Values.global) }}
        {{- if .Values.persistence.logs.selector }}
        selector: {{- include "server.tplvalues.render" (dict "value" .Values.persistence.logs.selector "context" $) | nindent 10 }}
        {{- end -}}
  {{- end }}
